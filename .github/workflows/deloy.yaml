name: Build, Push, and Deploy to GKE

on:
  push:
    branches:
      - main

env:
  DEPLOY_ALERT_CHANNEL: C07J1U691R6
  AWS_ROLE: ${{ secrets.AWS_ROLE }}
  AWS_REGION: "ap-northeast-2"
  REGISTRY: ${{ secrets.AWS_REGISTRY }}
  REPOSITORY: "ps-note/ps-note-client"
  CLUSTER_NAME: kodori-cluster
  NAMESPACE: ps-note
  DEPLOYMENT_NAME: deployment/ps-note-client
  CONTAINER_NAME: ps-note-client
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
  NEXT_PUBLIC_API_BASE_URL: ps-note-server

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version_name: ${{ steps.get_sha.outputs.SHA }}
      slack_mention: ${{ steps.set-mention.outputs.MENTION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Get short SHA
        id: get_sha
        run: echo "SHA=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"

      - name: Set MENTION based on triggering actor
        id: set-mention
        run: |
          if [[ "${{ github.actor }}" == "tonynamy" ]]; then
            echo "MENTION=<@U05G7MV9UAG>" >> "$GITHUB_OUTPUT"
          elif [[ "${{ github.actor }}" == "naya-h2" ]]; then
            echo "MENTION=<@U07BHTFBPB9>" >> "$GITHUB_OUTPUT"
          else
            echo "MENTION=<@U05G7MV9UAG> <@U07BHTFBPB9>" >> "$GITHUB_OUTPUT"
          fi

  build-and-push:
    needs: [prepare]
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPOSITORY }}
          tags: |
            type=sha
            latest
            batch

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile
          build-args: |
            RELEASE=${{ needs.prepare.outputs.version_name }}
            NEXT_PUBLIC_API_BASE_URL=${{ env.NEXT_PUBLIC_API_BASE_URL }}
          push: true
          platforms: |
            linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.REPOSITORY }}:cache
          cache-to: type=registry,mode=max,image-manifest=true,oci-mediatypes=true,ref=${{ env.REGISTRY }}/${{ env.REPOSITORY }}:cache

  deploy:
    needs: [prepare, build-and-push]
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPOSITORY }}
          tags: |
            type=sha

      - name: Extract tag
        id: extract-tag
        run: echo "TAG=$(echo '${{ steps.meta.outputs.tags }}' | head -n 1)" >> "$GITHUB_OUTPUT"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE }}

      - name: Update kube config
        run: aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Deploy to EKS
        run: |
          kubectl set image --namespace ${{ env.NAMESPACE }} ${{ env.DEPLOYMENT_NAME }} ${{ env.CONTAINER_NAME }}=${{ steps.extract-tag.outputs.TAG }}

      - name: Verify Deployment Status
        run: |
          kubectl rollout status --namespace ${{ env.NAMESPACE }} --timeout 10m ${{ env.DEPLOYMENT_NAME }}

  notify-start:
    needs: [prepare]
    runs-on: ubuntu-latest
    outputs:
      thread_ts: ${{ steps.send_start_notification.outputs.ts }}

    steps:
      - name: Send start notification
        id: send_start_notification
        uses: slackapi/slack-github-action@v1.26.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: ${{ env.DEPLOY_ALERT_CHANNEL }}
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":rocket: <https://github.com/${{ github.repository }}|${{ github.repository }}> `${{ needs.prepare.outputs.version_name }}` 버전 배포를 시작합니다 (<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|링크>)\n:loading: 빌드\n:loading: 배포"
                  }
                }
              ]
            }

      - name: Notify Trigger User
        uses: slackapi/slack-github-action@v1.26.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: ${{ env.DEPLOY_ALERT_CHANNEL }}
          payload: |
            {
              "thread_ts": "${{ steps.send_start_notification.outputs.ts }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "> 배포 책임자 : ${{ needs.prepare.outputs.slack_mention }}"
                  }
                }
              ]
            }
  

  notify-build-and-push-result:
    needs: [prepare, notify-start, build-and-push]
    if: ${{ always() }}

    runs-on: ubuntu-latest

    steps:
      - name: Set Emoji
        id: set-emoji
        run: |
          if [[ "${{ needs.build-and-push.result }}" == "cancelled" ]]; then
            echo "EMOJI=:no_entry_sign:" >> "$GITHUB_OUTPUT"
          elif [[ "${{ needs.build-and-push.result }}" == "failure" ]]; then
            echo "EMOJI=:x:" >> "$GITHUB_OUTPUT"
          else
            echo "EMOJI=:white_check_mark:" >> "$GITHUB_OUTPUT"
          fi

      - name: Set Message
        id: set-message
        run: |
          if [[ "${{ needs.build-and-push.result }}" == "cancelled" ]]; then
            echo "MESSAGE=빌드가 취소되었습니다" >> "$GITHUB_OUTPUT"
          elif [[ "${{ needs.build-and-push.result }}" == "failure" ]]; then
            echo "MESSAGE=빌드에 실패했습니다" >> "$GITHUB_OUTPUT"
          else
            echo "MESSAGE=빌드가 성공했습니다" >> "$GITHUB_OUTPUT"
          fi

      - name: Notify Overall Result if Failed
        if: ${{ needs.build-and-push.result == 'cancelled' || needs.build-and-push.result == 'failure' }}
        uses: slackapi/slack-github-action@v1.26.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: ${{ env.DEPLOY_ALERT_CHANNEL }}
          update-ts: ${{ needs.notify-start.outputs.thread_ts }}
          payload: |
            {
              "unfurl_links": false,
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":rocket: <https://github.com/${{ github.repository }}|${{ github.repository }}> `${{ needs.prepare.outputs.version_name }}` 버전 배포를 시작합니다 (<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|링크>)\n${{ steps.set-emoji.outputs.EMOJI }} 빌드\n:no_entry_sign: 배포"
                  }
                }
              ]
            }

      - name: Notify Overall Result if Succeeded
        if: ${{ needs.build-and-push.result == 'success' }}
        uses: slackapi/slack-github-action@v1.26.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: ${{ env.DEPLOY_ALERT_CHANNEL }}
          update-ts: ${{ needs.notify-start.outputs.thread_ts }}
          payload: |
            {
              "unfurl_links": false,
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":rocket: <https://github.com/${{ github.repository }}|${{ github.repository }}> `${{ needs.prepare.outputs.version_name }}` 버전 배포를 시작합니다 (<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|링크>)\n${{ steps.set-emoji.outputs.EMOJI }} 빌드\n:loading: 배포"
                  }
                }
              ]
            }


      - name: Notify failed
        if: ${{ needs.build-and-push.result == 'cancelled' || needs.build-and-push.result == 'failure' }}
        uses: slackapi/slack-github-action@v1.26.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: ${{ env.DEPLOY_ALERT_CHANNEL }}
          payload: |
            {
              "thread_ts": "${{ needs.notify-start.outputs.thread_ts }}",
              "unfurl_links": false,
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ steps.set-emoji.outputs.EMOJI }} <https://github.com/${{ github.repository }}|${{ github.repository }}> `${{ needs.prepare.outputs.version_name }}` ${{ steps.set-message.outputs.MESSAGE }}"
                  }
                }
              ]
            }

      - name: Notify Succeeded
        if: ${{ needs.build-and-push.result == 'success' }}
        uses: slackapi/slack-github-action@v1.26.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: ${{ env.DEPLOY_ALERT_CHANNEL }}
          payload: |
            {
              "thread_ts": "${{ needs.notify-start.outputs.thread_ts }}",
              "unfurl_links": false,
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ steps.set-emoji.outputs.EMOJI }} <https://github.com/${{ github.repository }}|${{ github.repository }}> `${{ needs.prepare.outputs.version_name }}` ${{ steps.set-message.outputs.MESSAGE }}"
                  }
                }
              ]
            }

  notify-deploy-result:
    needs: [prepare, notify-start, build-and-push, deploy]
    if: ${{ always() && needs.build-and-push.result == 'success' && needs.deploy.result != 'skipped'  }}

    runs-on: ubuntu-latest

    steps:
      - name: Set Emoji
        id: set-emoji
        run: |
          if [[ "${{ needs.deploy.result }}" == "cancelled" ]]; then
            echo "EMOJI=:no_entry_sign:" >> "$GITHUB_OUTPUT"
          elif [[ "${{ needs.deploy.result }}" == "failure" ]]; then
            echo "EMOJI=:x:" >> "$GITHUB_OUTPUT"
          else
            echo "EMOJI=:rocket:" >> "$GITHUB_OUTPUT"
          fi

      - name: Set Message
        id: set-message
        run: |
          if [[ "${{ needs.deploy.result }}" == "cancelled" ]]; then
            echo "MESSAGE=배포가 취소되었습니다" >> "$GITHUB_OUTPUT"
          elif [[ "${{ needs.deploy.result }}" == "failure" ]]; then
            echo "MESSAGE=배포에 실패했습니다" >> "$GITHUB_OUTPUT"
          else
            echo "MESSAGE=배포에 성공했습니다" >> "$GITHUB_OUTPUT"
          fi

      - name: Notify Overall Result
        uses: slackapi/slack-github-action@v1.26.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: ${{ env.DEPLOY_ALERT_CHANNEL }}
          update-ts: ${{ needs.notify-start.outputs.thread_ts }}
          payload: |
            {
              "unfurl_links": false,
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":rocket: <https://github.com/${{ github.repository }}|${{ github.repository }}> `${{ needs.prepare.outputs.version_name }}` 버전 배포를 시작합니다 (<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|링크>)\n:white_check_mark: 빌드\n${{ steps.set-emoji.outputs.EMOJI }} 배포"
                  }
                }
              ]
            }

      - name: Notify failed
        if: ${{ needs.deploy.result == 'cancelled' || needs.deploy.result == 'failure' }}
        uses: slackapi/slack-github-action@v1.26.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: ${{ env.DEPLOY_ALERT_CHANNEL }}
          payload: |
            {
              "thread_ts": "${{ needs.notify-start.outputs.thread_ts }}",
              "unfurl_links": false,
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ steps.set-emoji.outputs.EMOJI }} <https://github.com/${{ github.repository }}|${{ github.repository }}> `${{ needs.prepare.outputs.version_name }}` ${{ steps.set-message.outputs.MESSAGE }}"
                  }
                }
              ]
            }

      - name: Notify Succeeded
        if: ${{ needs.deploy.result == 'success' }}
        uses: slackapi/slack-github-action@v1.26.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: ${{ env.DEPLOY_ALERT_CHANNEL }}
          payload: |
            {
              "thread_ts": "${{ needs.notify-start.outputs.thread_ts }}",
              "unfurl_links": false,
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ steps.set-emoji.outputs.EMOJI }} <https://github.com/${{ github.repository }}|${{ github.repository }}> `${{ needs.prepare.outputs.version_name }}` ${{ steps.set-message.outputs.MESSAGE }}"
                  }
                }
              ]
            }
