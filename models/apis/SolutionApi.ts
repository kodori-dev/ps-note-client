/* tslint:disable */
/* eslint-disable */
/**
 * PS Note API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateSolutionSchema,
  ErrorSchema,
  PaginatedSolutionSchema,
  SolutionSchema,
  UpdateSolutionSchema,
} from '../models/index';
import {
    CreateSolutionSchemaFromJSON,
    CreateSolutionSchemaToJSON,
    ErrorSchemaFromJSON,
    ErrorSchemaToJSON,
    PaginatedSolutionSchemaFromJSON,
    PaginatedSolutionSchemaToJSON,
    SolutionSchemaFromJSON,
    SolutionSchemaToJSON,
    UpdateSolutionSchemaFromJSON,
    UpdateSolutionSchemaToJSON,
} from '../models/index';

export interface PsNoteServerAppsCoreViewsV2SolutionDeleteRequest {
    solution_id: number;
}

export interface PsNoteServerAppsCoreViewsV2SolutionGetRequest {
    page?: number;
    size?: number;
    member_id?: number | null;
    problem_id?: number | null;
    ordering?: Array<PsNoteServerAppsCoreViewsV2SolutionGetOrderingEnum>;
}

export interface PsNoteServerAppsCoreViewsV2SolutionGetSolutionRequest {
    solution_id: number;
}

export interface PsNoteServerAppsCoreViewsV2SolutionPatchRequest {
    solution_id: number;
    UpdateSolutionSchema: UpdateSolutionSchema;
}

export interface PsNoteServerAppsCoreViewsV2SolutionPostRequest {
    CreateSolutionSchema: CreateSolutionSchema;
}

/**
 * 
 */
export class SolutionApi extends runtime.BaseAPI {

    /**
     * 솔루션 삭제
     */
    async psNoteServerAppsCoreViewsV2SolutionDeleteRaw(requestParameters: PsNoteServerAppsCoreViewsV2SolutionDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['solution_id'] == null) {
            throw new runtime.RequiredError(
                'solution_id',
                'Required parameter "solution_id" was null or undefined when calling psNoteServerAppsCoreViewsV2SolutionDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/solutions/{solution_id}`.replace(`{${"solution_id"}}`, encodeURIComponent(String(requestParameters['solution_id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 솔루션 삭제
     */
    async psNoteServerAppsCoreViewsV2SolutionDelete(requestParameters: PsNoteServerAppsCoreViewsV2SolutionDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.psNoteServerAppsCoreViewsV2SolutionDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * 솔루션 목록 조회
     */
    async psNoteServerAppsCoreViewsV2SolutionGetRaw(requestParameters: PsNoteServerAppsCoreViewsV2SolutionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedSolutionSchema>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['member_id'] != null) {
            queryParameters['member_id'] = requestParameters['member_id'];
        }

        if (requestParameters['problem_id'] != null) {
            queryParameters['problem_id'] = requestParameters['problem_id'];
        }

        if (requestParameters['ordering'] != null) {
            queryParameters['ordering'] = requestParameters['ordering'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/solutions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedSolutionSchemaFromJSON(jsonValue));
    }

    /**
     * 솔루션 목록 조회
     */
    async psNoteServerAppsCoreViewsV2SolutionGet(requestParameters: PsNoteServerAppsCoreViewsV2SolutionGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedSolutionSchema> {
        const response = await this.psNoteServerAppsCoreViewsV2SolutionGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 솔루션 단건 조회
     */
    async psNoteServerAppsCoreViewsV2SolutionGetSolutionRaw(requestParameters: PsNoteServerAppsCoreViewsV2SolutionGetSolutionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SolutionSchema>> {
        if (requestParameters['solution_id'] == null) {
            throw new runtime.RequiredError(
                'solution_id',
                'Required parameter "solution_id" was null or undefined when calling psNoteServerAppsCoreViewsV2SolutionGetSolution().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/solutions/{solution_id}`.replace(`{${"solution_id"}}`, encodeURIComponent(String(requestParameters['solution_id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SolutionSchemaFromJSON(jsonValue));
    }

    /**
     * 솔루션 단건 조회
     */
    async psNoteServerAppsCoreViewsV2SolutionGetSolution(requestParameters: PsNoteServerAppsCoreViewsV2SolutionGetSolutionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SolutionSchema> {
        const response = await this.psNoteServerAppsCoreViewsV2SolutionGetSolutionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 솔루션 수정
     */
    async psNoteServerAppsCoreViewsV2SolutionPatchRaw(requestParameters: PsNoteServerAppsCoreViewsV2SolutionPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SolutionSchema>> {
        if (requestParameters['solution_id'] == null) {
            throw new runtime.RequiredError(
                'solution_id',
                'Required parameter "solution_id" was null or undefined when calling psNoteServerAppsCoreViewsV2SolutionPatch().'
            );
        }

        if (requestParameters['UpdateSolutionSchema'] == null) {
            throw new runtime.RequiredError(
                'UpdateSolutionSchema',
                'Required parameter "UpdateSolutionSchema" was null or undefined when calling psNoteServerAppsCoreViewsV2SolutionPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/solutions/{solution_id}`.replace(`{${"solution_id"}}`, encodeURIComponent(String(requestParameters['solution_id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateSolutionSchemaToJSON(requestParameters['UpdateSolutionSchema']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SolutionSchemaFromJSON(jsonValue));
    }

    /**
     * 솔루션 수정
     */
    async psNoteServerAppsCoreViewsV2SolutionPatch(requestParameters: PsNoteServerAppsCoreViewsV2SolutionPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SolutionSchema> {
        const response = await this.psNoteServerAppsCoreViewsV2SolutionPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 솔루션 생성
     */
    async psNoteServerAppsCoreViewsV2SolutionPostRaw(requestParameters: PsNoteServerAppsCoreViewsV2SolutionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SolutionSchema>> {
        if (requestParameters['CreateSolutionSchema'] == null) {
            throw new runtime.RequiredError(
                'CreateSolutionSchema',
                'Required parameter "CreateSolutionSchema" was null or undefined when calling psNoteServerAppsCoreViewsV2SolutionPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/solutions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSolutionSchemaToJSON(requestParameters['CreateSolutionSchema']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SolutionSchemaFromJSON(jsonValue));
    }

    /**
     * 솔루션 생성
     */
    async psNoteServerAppsCoreViewsV2SolutionPost(requestParameters: PsNoteServerAppsCoreViewsV2SolutionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SolutionSchema> {
        const response = await this.psNoteServerAppsCoreViewsV2SolutionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const PsNoteServerAppsCoreViewsV2SolutionGetOrderingEnum = {
    Id: 'id',
    Id2: '-id',
    SourceLang: 'source_lang',
    SourceLang2: '-source_lang',
    SubmittedAt: 'submitted_at',
    SubmittedAt2: '-submitted_at'
} as const;
export type PsNoteServerAppsCoreViewsV2SolutionGetOrderingEnum = typeof PsNoteServerAppsCoreViewsV2SolutionGetOrderingEnum[keyof typeof PsNoteServerAppsCoreViewsV2SolutionGetOrderingEnum];
