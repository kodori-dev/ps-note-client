/* tslint:disable */
/* eslint-disable */
/**
 * PS Note API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ProblemSchema } from './ProblemSchema';
import {
    ProblemSchemaFromJSON,
    ProblemSchemaFromJSONTyped,
    ProblemSchemaToJSON,
} from './ProblemSchema';

/**
 * 
 * @export
 * @interface PaginatedProblemSchema
 */
export interface PaginatedProblemSchema {
    /**
     * 
     * @type {number}
     * @memberof PaginatedProblemSchema
     */
    count: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatedProblemSchema
     */
    page: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatedProblemSchema
     */
    size: number;
    /**
     * 
     * @type {Array<ProblemSchema>}
     * @memberof PaginatedProblemSchema
     */
    items: Array<ProblemSchema>;
}

/**
 * Check if a given object implements the PaginatedProblemSchema interface.
 */
export function instanceOfPaginatedProblemSchema(value: object): value is PaginatedProblemSchema {
    if (!('count' in value) || value['count'] === undefined) return false;
    if (!('page' in value) || value['page'] === undefined) return false;
    if (!('size' in value) || value['size'] === undefined) return false;
    if (!('items' in value) || value['items'] === undefined) return false;
    return true;
}

export function PaginatedProblemSchemaFromJSON(json: any): PaginatedProblemSchema {
    return PaginatedProblemSchemaFromJSONTyped(json, false);
}

export function PaginatedProblemSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaginatedProblemSchema {
    if (json == null) {
        return json;
    }
    return {
        
        'count': json['count'],
        'page': json['page'],
        'size': json['size'],
        'items': ((json['items'] as Array<any>).map(ProblemSchemaFromJSON)),
    };
}

export function PaginatedProblemSchemaToJSON(value?: PaginatedProblemSchema | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'count': value['count'],
        'page': value['page'],
        'size': value['size'],
        'items': ((value['items'] as Array<any>).map(ProblemSchemaToJSON)),
    };
}

