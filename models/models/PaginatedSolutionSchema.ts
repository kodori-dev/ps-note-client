/* tslint:disable */
/* eslint-disable */
/**
 * PS Note API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SolutionSchema } from './SolutionSchema';
import {
    SolutionSchemaFromJSON,
    SolutionSchemaFromJSONTyped,
    SolutionSchemaToJSON,
} from './SolutionSchema';

/**
 * 
 * @export
 * @interface PaginatedSolutionSchema
 */
export interface PaginatedSolutionSchema {
    /**
     * 
     * @type {number}
     * @memberof PaginatedSolutionSchema
     */
    count: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatedSolutionSchema
     */
    page: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatedSolutionSchema
     */
    size: number;
    /**
     * 
     * @type {Array<SolutionSchema>}
     * @memberof PaginatedSolutionSchema
     */
    items: Array<SolutionSchema>;
}

/**
 * Check if a given object implements the PaginatedSolutionSchema interface.
 */
export function instanceOfPaginatedSolutionSchema(value: object): value is PaginatedSolutionSchema {
    if (!('count' in value) || value['count'] === undefined) return false;
    if (!('page' in value) || value['page'] === undefined) return false;
    if (!('size' in value) || value['size'] === undefined) return false;
    if (!('items' in value) || value['items'] === undefined) return false;
    return true;
}

export function PaginatedSolutionSchemaFromJSON(json: any): PaginatedSolutionSchema {
    return PaginatedSolutionSchemaFromJSONTyped(json, false);
}

export function PaginatedSolutionSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaginatedSolutionSchema {
    if (json == null) {
        return json;
    }
    return {
        
        'count': json['count'],
        'page': json['page'],
        'size': json['size'],
        'items': ((json['items'] as Array<any>).map(SolutionSchemaFromJSON)),
    };
}

export function PaginatedSolutionSchemaToJSON(value?: PaginatedSolutionSchema | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'count': value['count'],
        'page': value['page'],
        'size': value['size'],
        'items': ((value['items'] as Array<any>).map(SolutionSchemaToJSON)),
    };
}

