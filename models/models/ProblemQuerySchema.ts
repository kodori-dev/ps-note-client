/* tslint:disable */
/* eslint-disable */
/**
 * PS Note API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ProblemQuerySchema
 */
export interface ProblemQuerySchema {
    /**
     * 
     * @type {string}
     * @memberof ProblemQuerySchema
     */
    query?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemQuerySchema
     */
    boj_id?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof ProblemQuerySchema
     */
    submitted_at?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof ProblemQuerySchema
     */
    submitted_at__start?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof ProblemQuerySchema
     */
    submitted_at__end?: Date | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProblemQuerySchema
     */
    ordering?: Array<ProblemQuerySchemaOrderingEnum>;
    /**
     * 
     * @type {boolean}
     * @memberof ProblemQuerySchema
     */
    is_starred?: boolean | null;
}


/**
 * @export
 */
export const ProblemQuerySchemaOrderingEnum = {
    Id: 'id',
    Id2: '-id',
    Stars: 'stars',
    Stars2: '-stars',
    Solutions: 'solutions',
    Solutions2: '-solutions'
} as const;
export type ProblemQuerySchemaOrderingEnum = typeof ProblemQuerySchemaOrderingEnum[keyof typeof ProblemQuerySchemaOrderingEnum];


/**
 * Check if a given object implements the ProblemQuerySchema interface.
 */
export function instanceOfProblemQuerySchema(value: object): value is ProblemQuerySchema {
    return true;
}

export function ProblemQuerySchemaFromJSON(json: any): ProblemQuerySchema {
    return ProblemQuerySchemaFromJSONTyped(json, false);
}

export function ProblemQuerySchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProblemQuerySchema {
    if (json == null) {
        return json;
    }
    return {
        
        'query': json['query'] == null ? undefined : json['query'],
        'boj_id': json['boj_id'] == null ? undefined : json['boj_id'],
        'submitted_at': json['submitted_at'] == null ? undefined : (new Date(json['submitted_at'])),
        'submitted_at__start': json['submitted_at__start'] == null ? undefined : (new Date(json['submitted_at__start'])),
        'submitted_at__end': json['submitted_at__end'] == null ? undefined : (new Date(json['submitted_at__end'])),
        'ordering': json['ordering'] == null ? undefined : json['ordering'],
        'is_starred': json['is_starred'] == null ? undefined : json['is_starred'],
    };
}

export function ProblemQuerySchemaToJSON(value?: ProblemQuerySchema | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'query': value['query'],
        'boj_id': value['boj_id'],
        'submitted_at': value['submitted_at'] == null ? undefined : ((value['submitted_at'] as any).toISOString().substring(0,10)),
        'submitted_at__start': value['submitted_at__start'] == null ? undefined : ((value['submitted_at__start'] as any).toISOString().substring(0,10)),
        'submitted_at__end': value['submitted_at__end'] == null ? undefined : ((value['submitted_at__end'] as any).toISOString().substring(0,10)),
        'ordering': value['ordering'],
        'is_starred': value['is_starred'],
    };
}

