/* tslint:disable */
/* eslint-disable */
/**
 * PS Note API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ProblemTagSchema } from './ProblemTagSchema';
import {
    ProblemTagSchemaFromJSON,
    ProblemTagSchemaFromJSONTyped,
    ProblemTagSchemaToJSON,
} from './ProblemTagSchema';

/**
 * 
 * @export
 * @interface ProblemSchema
 */
export interface ProblemSchema {
    /**
     * 
     * @type {number}
     * @memberof ProblemSchema
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof ProblemSchema
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ProblemSchema
     */
    boj_id: string;
    /**
     * 
     * @type {string}
     * @memberof ProblemSchema
     */
    level: string;
    /**
     * 
     * @type {Date}
     * @memberof ProblemSchema
     */
    created_at: Date;
    /**
     * 
     * @type {Date}
     * @memberof ProblemSchema
     */
    updated_at: Date;
    /**
     * 
     * @type {string}
     * @memberof ProblemSchema
     */
    label: string;
    /**
     * 
     * @type {string}
     * @memberof ProblemSchema
     */
    url: string;
    /**
     * 
     * @type {boolean}
     * @memberof ProblemSchema
     */
    is_solved: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof ProblemSchema
     */
    is_starred: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof ProblemSchema
     */
    stars: number;
    /**
     * 
     * @type {number}
     * @memberof ProblemSchema
     */
    solutions: number;
    /**
     * 
     * @type {Array<ProblemTagSchema>}
     * @memberof ProblemSchema
     */
    tags: Array<ProblemTagSchema>;
}

/**
 * Check if a given object implements the ProblemSchema interface.
 */
export function instanceOfProblemSchema(value: object): value is ProblemSchema {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('boj_id' in value) || value['boj_id'] === undefined) return false;
    if (!('level' in value) || value['level'] === undefined) return false;
    if (!('created_at' in value) || value['created_at'] === undefined) return false;
    if (!('updated_at' in value) || value['updated_at'] === undefined) return false;
    if (!('label' in value) || value['label'] === undefined) return false;
    if (!('url' in value) || value['url'] === undefined) return false;
    if (!('is_solved' in value) || value['is_solved'] === undefined) return false;
    if (!('is_starred' in value) || value['is_starred'] === undefined) return false;
    if (!('stars' in value) || value['stars'] === undefined) return false;
    if (!('solutions' in value) || value['solutions'] === undefined) return false;
    if (!('tags' in value) || value['tags'] === undefined) return false;
    return true;
}

export function ProblemSchemaFromJSON(json: any): ProblemSchema {
    return ProblemSchemaFromJSONTyped(json, false);
}

export function ProblemSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProblemSchema {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'boj_id': json['boj_id'],
        'level': json['level'],
        'created_at': (new Date(json['created_at'])),
        'updated_at': (new Date(json['updated_at'])),
        'label': json['label'],
        'url': json['url'],
        'is_solved': json['is_solved'],
        'is_starred': json['is_starred'],
        'stars': json['stars'],
        'solutions': json['solutions'],
        'tags': ((json['tags'] as Array<any>).map(ProblemTagSchemaFromJSON)),
    };
}

export function ProblemSchemaToJSON(value?: ProblemSchema | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'name': value['name'],
        'boj_id': value['boj_id'],
        'level': value['level'],
        'created_at': ((value['created_at']).toISOString()),
        'updated_at': ((value['updated_at']).toISOString()),
        'label': value['label'],
        'url': value['url'],
        'is_solved': value['is_solved'],
        'is_starred': value['is_starred'],
        'stars': value['stars'],
        'solutions': value['solutions'],
        'tags': ((value['tags'] as Array<any>).map(ProblemTagSchemaToJSON)),
    };
}

